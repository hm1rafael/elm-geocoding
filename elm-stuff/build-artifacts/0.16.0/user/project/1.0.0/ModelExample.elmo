Elm.ModelExample = Elm.ModelExample || {};
Elm.ModelExample.make = function (_elm) {
   "use strict";
   _elm.ModelExample = _elm.ModelExample || {};
   if (_elm.ModelExample.values) return _elm.ModelExample.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Html = Elm.Html.make(_elm),
   $Html$Attributes = Elm.Html.Attributes.make(_elm),
   $Html$Events = Elm.Html.Events.make(_elm),
   $Http = Elm.Http.make(_elm),
   $Json$Decode = Elm.Json.Decode.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $String = Elm.String.make(_elm),
   $Task = Elm.Task.make(_elm);
   var _op = {};
   var address = A2($Json$Decode.object1,
   $Basics.toString,
   A2($Json$Decode._op[":="],
   "formatted_address",
   $Json$Decode.string));
   var getAddresses = function (model) {
      var url = $Task.succeed($String.concat(_U.list(["https://maps.googleapis.com/maps/api/geocode/json?latlng="
                                                     ,model.latitude
                                                     ,","
                                                     ,model.longitude
                                                     ,"&key=AIzaSyD1fgtZPKk5gdcy6MZjVLySMAQlNiatO1g"])));
      return A2($Task.andThen,
      url,
      function (_p0) {
         return A2($Task.mapError,
         $Basics.always("Oops! A problem just happened"),
         A2($Http.get,
         A2($Json$Decode.at,
         _U.list(["results"]),
         $Json$Decode.list(address)),
         _p0));
      });
   };
   var div$ = function (address) {
      return A2($Html.div,
      _U.list([]),
      _U.list([$Html.text(address)]));
   };
   var update = F2(function (action,model) {
      var addresses = A2($Debug.log,"addresses",model.addresses);
      var longitude = A2($Debug.log,"longitude",model.longitude);
      var latitude = A2($Debug.log,"latitude",model.latitude);
      var _p1 = action;
      switch (_p1.ctor)
      {case "NoOp": return model;
         case "UpdateAddresses": var _p3 = _p1._0;
           var adjustedAddressResult = function () {
              var _p2 = _p3;
              if (_p2.ctor === "Ok") {
                    return $List.isEmpty(_p2._0) && ($Basics.not($String.isEmpty(model.latitude)) && $Basics.not($String.isEmpty(model.longitude))) ? $Result.Err("No results found for the coordinates!!!") : $String.isEmpty(model.latitude) && $String.isEmpty(model.longitude) ? $Result.Err("Give me a coordinate (Latitude/Longitude)!!!") : $String.isEmpty(model.latitude) ? $Result.Err("Give me a latitude!!!") : $String.isEmpty(model.longitude) ? $Result.Err("Give me a longitude!!!") : _p3;
                 } else {
                    return _p3;
                 }
           }();
           return _U.update(model,{addresses: adjustedAddressResult});
         case "SetLatitude": return _U.update(model,{latitude: _p1._0});
         default: return _U.update(model,{longitude: _p1._0});}
   });
   var SetLongitude = function (a) {
      return {ctor: "SetLongitude",_0: a};
   };
   var SetLatitude = function (a) {
      return {ctor: "SetLatitude",_0: a};
   };
   var UpdateAddresses = function (a) {
      return {ctor: "UpdateAddresses",_0: a};
   };
   var NoOp = {ctor: "NoOp"};
   var actions = $Signal.mailbox(NoOp);
   var init = {latitude: ""
              ,longitude: ""
              ,addresses: $Result.Ok(_U.list([]))};
   var query = $Signal.mailbox(init);
   var view = function (model) {
      var div$ = function (address) {
         return A2($Html.div,
         _U.list([]),
         _U.list([$Html.text(address)]));
      };
      var addressElement = function () {
         var _p4 = model.addresses;
         if (_p4.ctor === "Err") {
               return A2($Html.div,
               _U.list([]),
               _U.list([$Html.text(_p4._0)]));
            } else {
               return A2($Html.div,_U.list([]),A2($List.map,div$,_p4._0));
            }
      }();
      return A2($Html.div,
      _U.list([]),
      _U.list([A2($Html.input,
              _U.list([$Html$Attributes.type$("String")
                      ,$Html$Attributes.placeholder("latitude")
                      ,A3($Html$Events.on,
                      "input",
                      $Html$Events.targetValue,
                      function (latitude) {
                         return A2($Signal.message,
                         actions.address,
                         SetLatitude(latitude));
                      })]),
              _U.list([]))
              ,A2($Html.input,
              _U.list([$Html$Attributes.type$("String")
                      ,$Html$Attributes.placeholder("longitude")
                      ,A3($Html$Events.on,
                      "input",
                      $Html$Events.targetValue,
                      function (longitude) {
                         return A2($Signal.message,
                         actions.address,
                         SetLongitude(longitude));
                      })]),
              _U.list([]))
              ,A2($Html.button,
              _U.list([A2($Html$Events.onClick,query.address,model)]),
              _U.list([$Html.text("Search")]))
              ,addressElement]));
   };
   var request = Elm.Native.Task.make(_elm).performSignal("request",
   A2($Signal.map,
   function (task) {
      return A2($Task.andThen,
      $Task.toResult(task),
      function (_p5) {
         return A2($Signal.send,actions.address,UpdateAddresses(_p5));
      });
   },
   A2($Signal.map,getAddresses,query.signal)));
   var model = A3($Signal.foldp,update,init,actions.signal);
   var main = A2($Signal.map,view,model);
   var Coordinate = F3(function (a,b,c) {
      return {latitude: a,longitude: b,addresses: c};
   });
   return _elm.ModelExample.values = {_op: _op
                                     ,Coordinate: Coordinate
                                     ,init: init
                                     ,NoOp: NoOp
                                     ,UpdateAddresses: UpdateAddresses
                                     ,SetLatitude: SetLatitude
                                     ,SetLongitude: SetLongitude
                                     ,update: update
                                     ,div$: div$
                                     ,view: view
                                     ,actions: actions
                                     ,query: query
                                     ,model: model
                                     ,main: main
                                     ,address: address
                                     ,getAddresses: getAddresses};
};