Elm.Coordinate = Elm.Coordinate || {};
Elm.Coordinate.make = function (_elm) {
   "use strict";
   _elm.Coordinate = _elm.Coordinate || {};
   if (_elm.Coordinate.values) return _elm.Coordinate.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Http = Elm.Http.make(_elm),
   $Json$Decode = Elm.Json.Decode.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $String = Elm.String.make(_elm),
   $Task = Elm.Task.make(_elm);
   var _op = {};
   var address = A2($Json$Decode.object1,
   $Basics.toString,
   A2($Json$Decode._op[":="],
   "formatted_address",
   $Json$Decode.string));
   var getAddresses = function (model) {
      var url = $Task.succeed($String.concat(_U.list(["https://maps.googleapis.com/maps/api/geocode/json?latlng="
                                                     ,model.latitude
                                                     ,","
                                                     ,model.longitude
                                                     ,"&key=AIzaSyD1fgtZPKk5gdcy6MZjVLySMAQlNiatO1g"])));
      return A2($Task.andThen,
      url,
      function (_p0) {
         return A2($Task.mapError,
         $Basics.always("Oops! A problem just happened"),
         A2($Http.get,
         A2($Json$Decode.at,
         _U.list(["results"]),
         $Json$Decode.list(address)),
         _p0));
      });
   };
   var update = F2(function (action,model) {
      var addresses = A2($Debug.log,"addresses",model.addresses);
      var longitude = A2($Debug.log,"longitude",model.longitude);
      var latitude = A2($Debug.log,"latitude",model.latitude);
      var _p1 = action;
      switch (_p1.ctor)
      {case "NoOp": return model;
         case "UpdateAddresses": var _p3 = _p1._0;
           var adjustedAddressResult = function () {
              var _p2 = _p3;
              if (_p2.ctor === "Ok") {
                    return $List.isEmpty(_p2._0) && ($Basics.not($String.isEmpty(model.latitude)) && $Basics.not($String.isEmpty(model.longitude))) ? $Result.Err("No results found for the coordinates!!!") : $String.isEmpty(model.latitude) && $String.isEmpty(model.longitude) ? $Result.Err("Give me a coordinate (Latitude/Longitude)!!!") : $String.isEmpty(model.latitude) ? $Result.Err("Give me a latitude!!!") : $String.isEmpty(model.longitude) ? $Result.Err("Give me a longitude!!!") : _p3;
                 } else {
                    return _p3;
                 }
           }();
           return _U.update(model,{addresses: adjustedAddressResult});
         case "SetLatitude": return _U.update(model,{latitude: _p1._0});
         default: return _U.update(model,{longitude: _p1._0});}
   });
   var SetLongitude = function (a) {
      return {ctor: "SetLongitude",_0: a};
   };
   var SetLatitude = function (a) {
      return {ctor: "SetLatitude",_0: a};
   };
   var UpdateAddresses = function (a) {
      return {ctor: "UpdateAddresses",_0: a};
   };
   var NoOp = {ctor: "NoOp"};
   var init = {latitude: ""
              ,longitude: ""
              ,addresses: $Result.Ok(_U.list([]))};
   var Coordinate = F3(function (a,b,c) {
      return {latitude: a,longitude: b,addresses: c};
   });
   return _elm.Coordinate.values = {_op: _op
                                   ,Coordinate: Coordinate
                                   ,init: init
                                   ,NoOp: NoOp
                                   ,UpdateAddresses: UpdateAddresses
                                   ,SetLatitude: SetLatitude
                                   ,SetLongitude: SetLongitude
                                   ,update: update
                                   ,address: address
                                   ,getAddresses: getAddresses};
};